1. .git directory
.git 안에 config라는 설정 파일이 존재한다. => 이를 통해서 git의 이름, 이메일, 색깔 등을 설정할 수 있다.

git config user.name "name" => user's name
git config user.email "e-mail" => use's emial
--local 키워드를 통해 로컬로 설정가능

-- .config 파일안에서의 barnch 설정
[color]
ui = true
[color "branch"]
local = cyan bold
[color "diff"]
old = magenta bold


2. refs Folder
.git 안에 refs라는 폴더가 존재하고 하위 폴더 heads, remotes, tags가 존재한다.
refs는 포인터 혹은 참조 값이 저장된다. (커밋 참조값, 태그 참조, checkout...)

.git/heads
브랜치가 현재 참조하고 있는 커밋 해쉬를 가지고 있다. => 브랜치가 가리키고 있는 커밋 해쉬

.git/remotes
원격 저장소별로 하위 폴더가 존재한다. (origin, hwt)
=> 원격 추적 브랜치가 가리키는 커밋 해쉬


3. HEAD
단순 텍스트 파일이며, 커밋이나 브랜치 참조 값을 가지고 있다.
** head가 가리키는 곳을 나타낸다.


4. objects
깃은 4가지의 객체가 존재한다.
=> commit ,tree, blob, annotated tag

Obj 폴더안에 위의 4종류의 깃 객체가 저장된다. => 모두 해쉬 값을 갖는다.


5. Hash-Func
입력값 => Hash-func => 출력값

hash란?
5-1. 입력값이 무엇이든간에 hash-func의 출력값은 항상 같은 길이를 가진다.
5-2. 이 떄 입력값을 아무리 집어넣어도 같은 출력값이 나와야 한다.
5-3. 입력값으로 출력값을 알 수 없다.
5-4. 입력값에 작은 변화가 발생하면 출력값엔 큰 변화가 발생햐야 한다.

깃 암호화 함수 SHA-1(해시 함수) => 항상 40자리 16진수 문자열을 생성/ 결과값 고정


6. 키 값 데이터 저장소로소의 git
commit, tree, blob, anotated-tag => 모두 SHA-1으로 해시된 값을 가지고 있다.

깃은 컨텐츠를 저장하면 고유한 키를 반환한다. => 그것이 SHA-1 해시 함수의 출력값
key => 해시코드
value => 각 컨텐츠

git에 key를 주면 컨텐츠를 반환한다. 

=> 깃은 key-value 저장소이다.


7. git hash-object로 해싱하기
object의 git의 DB이다.
저장되는 방식은 해시함수를 통해 해시코드를 기반으로 폴더와 파일을 생성하여 data를 저장한다.
object 폴더의 하위 폴더로 해시 코드를 따서 2글자 폴더를 생성하고 2글자를 제외한 파일을 생성한다.

echo "hello"| git hash-object --stdin => 문자열에 대한 해시코드를 반환한다. (저장 x)
echo "hello"| git hash-object --stdin -w => 문자열에 대한 해시코드를 생성하고 obj 폴더에 데이터를 저장한다.

git hash-object filename => 파일의 해시코드를 반환한다. (저장 x)
git hash-object filename -w => 파일의 해시코드를 생성하고 obj 폴더에 데이터를 저장한다.

=> 폴더에 파일을 직접적으로 읽거나 꺼내올 수 없다.


8. git cat-file
git cat-file -p hashcode => objects의 데이터를 꺼내오는 명령어
git cat-file -p hascode > filename => file에 해당 해시코드에 데이터를 집어넣는다. (수동)

git은 파일단위로 해시코드를 생성하고 objects에 저장하는 것이 아니다.
git은 스냅샷 단위로 해시코드를 생성하고 objects에 저장한다.





















































