1. reflog(referenct log)
깃이 보관하는 기록이다. 
=> head가 참조하고 있는 커밋이 변경될 떄마다 기록한다.

.git의 logs폴더의 HEAD는 HEAD의 이동을 기록한 공간이다.
또한 heads, remotes 폴더에 모든 브랜치에 대한 끝을 추적해서 기록한다.
=> 원격 브랜치, 일반 브랜치 모두 기록한다.

** 각 브랜치에 대한 head의 움직임을 기록한다.


2. reflog의 한계
reflog는 local 기록이고 영구적이지 않다. (90days)
공동작업자의 reflog는 없다는 것이다.


3. git Reflog 표시 명령어
git reflog show HEAD (브랜치, 원격 브랜치) (ver2 or origin/main)
reflog들은 각각의 reflog 식별자가 존재한다. Head@{n}
HEAD@{n}은 가장 최근의 head가 0을 부여받고 나머지는 번호가 밀린다.
HEAD가 변경되면 변경된 것이 0이 되고 기존의 0이었던 것이 1 => 2 => 3이 된다는 것이다.


4. reflog 참조 전달하기
git reflog show HEAD@{n} => head가 n번쨰부터 마지막까지의 reflog를 가져온다.


5. reflog timeStamp
reflog 모든 항목에는 그에 해당하는 타임스탬프가 존재한다.
=> .git의 logs의 파일들에는 timeStamp가 존재한다. 이를 이용할 수 있다.

git reflog branch-name@{one.(week, days, yesterday...).age}
=> 해당 시간의 타임스탬프부터 표현가능한 과거이력까지 보여준다.

타임스탬프는 {}안 표현식에 들어갈 수 있다. 
=> git reflog show HEAD(branch-name...)@{timeStamp} 가능

diff
=> git diff main ver2@{yesterday}

head 분리
=> git checkout main@{1.week.ago}


6. reflog commit 복구
git reset --hard 커밋해쉬 or head~n  or head@{n}
=> 과거의 커밋으로 돌아가고 그 앞에 있는 커밋을 삭제한다.
=> 그럼에도 reflog에는 사라진 커밋에 대한 기록이 남겨져있다.

git reset --hard (삭제된 커밋해쉬 or head~n...)
=> 사라진 커밋이 복귀하고 head가 사라진 커밋을 가리킨다.

*** 이러한 방식으로 사라진 커밋에 대해 복구할 수 있다. 
*** 그러나 90일 이후에는 불가능하고 log들은 local에 한정되어 있다.

