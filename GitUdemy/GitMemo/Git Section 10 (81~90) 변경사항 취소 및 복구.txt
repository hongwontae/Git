1. 이전 커밋 확인하기
Head는 특정 브랜치의 가장 최근의 commit을 가리키는 것이 default이다.
=> 브랜치을 참조하는 것이 목표이다.

git checkout hashCode
=> 분리된 헤드 상태가 된다.
=> Head가 특정 브랜치가 아닌 특정 commit을 참조한다.


2. git checkout hashcode
2-1. 해당 커밋으로 돌아가 오류를 점검하거나 복사한다.
2-2. 해당 커밋에서 브랜치를 생성해서 작업한다.
=> 두 가지 작업을 할 수 있다.


3. git checkout HEAD~n/ git swtich -
git checkout HEAD~number => 해당 브랜치의 최근 커밋으로부터 -1, -2만큼 간다는 것이다. 해시코드 대체 방법이다.

git switch - => 브랜치에 해시코드나 HEAD~n을 통해 head를 이동시키고 다시 최종 브랜치 커밋으로 돌아오기 위한 방법이다. git switch Branch-Name과 같다.


4. git checkout HEAD fileName/ git checkout -- fileName
두 명령어 모두 변경사항을 취소하는 명령어이다./ 가장 최근의 커밋으로 돌린다고 생각해도 된다.
=> filename이 빠지면 안된다.


5. git resotre
git restore filename => git checkout Head (filename) => 변경사항 취소/ 4와 같은 행동을 한다.
=> filename이 빠지면 안된다.

git restore --source Head~n(hashcode) filename => 특정 커밋 시점의 파일의 내역을 현 커밋 시점의 변경사항으로 가져온다. 


6. git restore --staged file-name
stage 영역에 올라간 파일을 다시 working directory에 내리는 명령어이다.	


7. git reset
git reset 해시코드(head~n) => 해시코드(head~n)의 커밋으로 돌아가고 최종 커밋 시점의 내역들은 Working directory가 된다.

git reset --hard 해시코드(head~n) => 위와 같은 동작을 하지만 최종 커밋 시점의 내역들은 아예 사라진다.

=> 브랜치 head가 가리키는 커밋 시점이 뒤로 빠꾸되는 것이다.


8. git revert
git revert 해시코드(head~n) => 해당 해시코드 커밋을 새로운 커밋 지점으로 가져와서 커밋하기 위해 변경된 사항을 제외하고 커밋한다.
=> a647c40 커밋 시점을 가져와서 a647c40이 되기 전 변경사항을 제외하고 커밋하는 것이다.
















