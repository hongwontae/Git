1. Git Repo란 무엇인가?
git --version => 깃 버전을 알려주는 명령어

git Repository는 그 프로젝트의 이력을 갖고 있는 작업공간을 뜻한다. 모든 repo들은 독립적이다.


2. 우리의 첫 번쨰 명령어 : git init, git status
git status => 저장소의 상태를 반환하는 명령어이다.
git init => 현재 위치에 새 저장소를 초기화한다. (현재 위치가 git repo가 된다는 뜻이다.)


3. 숨겨진 .git
git init를 하면 해당 위치에 .git 폴더가 생성된다. 이 폴더가 이 위치에서 발생하는 모든 일의 이력을 추적하고 저장한다. 
.git를 삭제하면 git 저장소를 삭제하는 것임으로 git status를 사용하면 git init를 하지 않은 상태의 메시지를 보여준다. => git 저장소를 삭제하는 것 === .git를 삭제하는 것


4. Git 초심자가 흔히 저지르는 실수
git은 하향식으로 작동한다. 하나의 폴더를 생성하고 git init를 실행하여 git repo를 만들었다면 그 폴더안의 모든 자료나 데이터 파일, 폴더들은 최상단 git에 의해 추적되고 관리된다. 주의해야 할 점은 git init 명령어를 실행한 폴더의 하위 폴더에서 git init를 실행해 git repo를 만드는 행위다. 이는 심각한 오류를 발생시킬 수 있다.


5. git add
커밋전에 변경사항들을 선택하고 그룹핑하는 기능이다.
git add file1, file2....=> staging Area로 보내는 작업/ 공백으로 다수의 파일을 식별한다.
git add . => 워킹 디렉토리의 변경사항 모두 Staging Area로 보낸다.

(git add를 할 떄 파일 위치가 git 저장소의 위치가 아니라면 주소를 명시해야 한다.)

Working directory => 작업 파일
Staging Area => git add를 사용하면 가는 공간
Repository => git commit를 사용하면 가는 공간


6. Commit
git commit => 에디터를 통해 git message를 적는 방법
git commit -m "..." => 바로 git message와 함께 repositoy로 보낸다.


7. git log
git log => 커밋 정보를 나타낸다.


(git log => commit의 message와  date와 커밋해쉬를 보고 싶을 떄 사용한다.)


















