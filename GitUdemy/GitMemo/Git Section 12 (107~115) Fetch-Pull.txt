1. 원격 추적 브랜치
gitHub과 통신할 떄의 시점을 의미한다.
git clone을 사용하면 해당 파일들과 이력을 가지고 온다. 해당 gitHub 저장소에 누군가 push를 하고 내가 push을 할 떄 에러가 발생한다. => 충돌사항이 생기기 떄문이다. => 이를 쉽게 구분하기 위해 원격 추적 브랜치가 존재하는 것이다.

git branch -r => 원격 추적 브랜치를 볼 수 있다.

2. 원격 추적 브랜치와 일반 브랜치
원격 추적 브랜치는 gitHub과 통신한 시점에서 움직이지 않는다.
일반 브랜치는 로컬에서 각 브랜치의 commit을 통해 움직인다.
=> 로컬에서 작업을 하면 로컬 브랜치 커밋 시점이 원격 추적 브랜치 시점과 다르다고 표현한다.

최근에 gitHub과 통신한 초기 파일들과 이력들만 보고 싶다면 git checkout 원격추적브랜치


3. 원격 추적 브랜치 +
git clone 저장소를 가져오면 처음에는 main 브랜치의 파일, 이력만 존재한다.
그러나 git branch -r 명령어를 사용하면 원격 추적 브랜치는 모두 존재한다. => default 브랜치만 동기화되고 나머지 브랜치들은 가져왔으나 동기화는 되지 않은 상태이다.

해당되는 브랜치를 가져오고 싶다면 git switch branch-name을 하면 된다.
기존에는 git checkout --track 원격Nickname/브랜치이름 을 사용해야 했다.


4. git fetch
GitHub 저장소에 추가정보가 존재하고 로컬 git 저장소에는 추가정보가 없을 떄 사용하는 명령어이다.

local 저장소에 working directory와 staging Area을 덮어쓰지 않고 해당 커밋 지점보다 앞선 곳에 포인터를 만들고 gitHub 추가 정보를 가져오는 것이다. => git checkout 원격추적브랜치를 사용하면 fetch 포인터 확인가능

git fetch origin(origin 안써도 된다.)/ git fetch origin branch-name (해당 브랜치만 fetch한다.)

=> 이 상태에서는 파일이나 커밋 이력을 확인하거나 새로운 이력을 브랜치를 생성해서 가져가는 방법이 있다.
=> git clone을 하든 git fetch을 하든 원격 추적 브랜치 + default 브랜치을 동기화한다.


5. git pull
git pull 원격Nickname 로컬브랜치Name => gitHub 저장 내역을 가져와서 통합한다. 병합 충돌이 생길 수 있다.
빨기 감기 병합이라면 별 다른 문제는 생기지 않는다.
=> 빨리 감기 병합이면 단순히 따라오는 것이기에 원격 추적 브랜치와 분리는 되지 않는다.


6. git pull Merge
만약 충돌 사항이 존재하면 충돌 사항 병합을 실행해야한다.
새로운 커밋 시점이 생긴다. => push을 해야 원격 추적 브랜치와 일반 head가 같은 곳을 바라본다.
=> 원격 추적 브랜치는 gitHub과 통신한 시점이기 때문이다.



*** 빨리 감기 병합이라면 git log message는 gitHub에 저장되어 있는 것을 참조한다. => 당연한 것
*** 충돌 사항 병합이라면 새로운 커밋 시점에다가 병합한 내용을 집어넣는다. 이때는 원격 추적 브랜치는 떨어져 있다. push 해줘야 같은 지점을 바라본다.





















